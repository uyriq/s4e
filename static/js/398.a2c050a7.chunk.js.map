{"version":3,"file":"static/js/398.a2c050a7.chunk.js","mappings":"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","sources":["features/use-screenshot.js","features/counter-text.jsx","features/controlled-counter-digit.jsx","features/number-input-digit.jsx","features/arrow-hand.jsx","pages/test/index.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react'\nimport download from 'downloadjs'\nimport { toPng } from 'html-to-image'\n\n/**\n * Hook to generate screenshot\n */\nfunction useScreenshot() {\n    const captureRef1 = useRef()\n    const captureRef2 = useRef()\n    const [fileName, setFileName] = useState('undefined.PNG')\n    const [status, setStatus] = useState('idle')\n    let choiceRef\n\n    const UUID = (function UUIDGeneratorBrowser() {\n        return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11)\n            .replace(/[018]/g, (c) =>\n                (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16)\n            )\n            .split('-')[0]\n    })()\n\n    const curdate = (function getDate() {\n        let d = new Date()\n        let dformat = d.toISOString().split('T')[0]\n        return '' + dformat\n    })()\n    console.log(UUID)\n    async function generateImage(e, arg = 0, isRandomFname) {\n        console.log(arg)\n\n        e.preventDefault()\n\n        switch (arg) {\n            case 2: {\n                choiceRef = captureRef2\n                break\n            }\n            case 1:\n            default: {\n                choiceRef = captureRef1\n                break\n            }\n        }\n\n        if (!choiceRef?.current) {\n            return\n        }\n\n        isRandomFname ? setFileName(UUID + '.png') : setFileName(curdate + '.png')\n        try {\n            setStatus('loading')\n            const imgBase64 = await toPng(choiceRef.current, {\n                quality: 1,\n                pixelRatio: 1,\n            })\n            e.isTrusted && download(imgBase64, fileName)\n            setStatus('success')\n        } catch (error) {\n            setStatus('error')\n            console.error(error)\n        } finally {\n            choiceRef = null\n        }\n    }\n\n    return {\n        generateImage,\n        captureRef1,\n        captureRef2,\n        status,\n    }\n}\n\nexport default useScreenshot\n","import { Text } from '@mantine/core'\nimport PropTypes from 'prop-types'\n\nconst CounterText = (props) => {\n    const { children, color = '#4f4848', top = 0, left = 0, onChange, ...restofProps } = props\n\n    const sx = props.sx || {\n        letterSpacing: 0.1,\n        opacity: 0.9,\n        fontFamily: 'Tajawal, sans-serif',\n        fontKerning: 'normal',\n        fontSize: 28,\n        zIndex: 10,\n        position: 'absolute',\n        top: top,\n        left: left,\n        backdropFilter: 'blur(1px)',\n        textShadow: '1px 1px 1px rgba(0,0,0,.4), -1px -1px 0 rgba(255,255,255,.1)',\n    }\n\n    return (\n        <Text span weight={'light'} color={color} sx={sx} {...restofProps}>\n            {children}\n        </Text>\n    )\n}\n\nCounterText.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n    left: PropTypes.number,\n    top: PropTypes.number,\n    color: PropTypes.string,\n    onChange: PropTypes.func,\n    sx: PropTypes.shape({\n        letterSpacing: PropTypes.number,\n        opacity: PropTypes.number,\n        fontFamily: PropTypes.string,\n        fontKerning: PropTypes.string,\n        fontSize: PropTypes.number,\n        zIndex: PropTypes.number,\n        position: PropTypes.string,\n        top: PropTypes.number,\n        left: PropTypes.number,\n        backdropFilter: PropTypes.string,\n        textShadow: PropTypes.string,\n    }),\n}\n\nexport default CounterText\n","import { Text } from '@mantine/core'\nimport PropTypes from 'prop-types'\n\nconst ControlledCounterDigit = (props) => {\n    const {\n        spaceBetween = 20,\n        digitsArray = [],\n        color = '#d9480f',\n        top = 0,\n        left = 0,\n        onChange,\n        ...restofProps\n    } = props\n\n    return (\n        <div>\n            {digitsArray.map((number, index) => (\n                <Text\n                    key={index}\n                    span\n                    weight={'light'}\n                    color={color}\n                    sx={{\n                        position: 'absolute',\n                        top: top,\n                        left: left + spaceBetween * index,\n                        letterSpacing: 0.1,\n                        opacity: 0.9,\n                        fontFamily: 'Tajawal, sans-serif',\n                        fontKerning: 'normal',\n                        fontSize: 32,\n                        zIndex: 10,\n                        backdropFilter: 'blur(1px)',\n                        textShadow: '1px 1px 1px rgba(0,0,0,.4), -1px -1px 0 rgba(255,255,255,.1)',\n                    }}\n                    {...restofProps}\n                >\n                    {number}\n                </Text>\n            ))}\n        </div>\n    )\n}\n\nControlledCounterDigit.propTypes = {\n    digitsArray: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])).isRequired,\n    spaceBetween: PropTypes.number,\n    left: PropTypes.number,\n    top: PropTypes.number,\n    color: PropTypes.string,\n    onChange: PropTypes.func,\n    sx: PropTypes.shape({\n        letterSpacing: PropTypes.number,\n        opacity: PropTypes.number,\n        fontFamily: PropTypes.string,\n        fontKerning: PropTypes.string,\n        fontSize: PropTypes.number,\n        zIndex: PropTypes.number,\n        position: PropTypes.string,\n        top: PropTypes.number,\n        left: PropTypes.number,\n        backdropFilter: PropTypes.string,\n        textShadow: PropTypes.string,\n    }),\n}\n\nexport default ControlledCounterDigit\n","import { NumberInput } from '@mantine/core'\n\nimport PropTypes from 'prop-types'\n\nconst NumberInputDigit = (props) => {\n    const { val = 0, onChange, ...restofProps } = props\n\n    return (\n        <NumberInput\n            {...restofProps}\n            value={val}\n            min={0}\n            max={99999}\n            stepHoldDelay={500}\n            stepHoldInterval={(t) => Math.max(1000 / t ** 4, 1)}\n            step={0.0001}\n            precision={4}\n            decimalSeparator=\",\"\n            onChange={onChange}\n        />\n    )\n}\n\nNumberInputDigit.propTypes = {\n    restofProps: PropTypes.element,\n    onChange: PropTypes.func.isRequired,\n    val: PropTypes.oneOfType([PropTypes.number.isRequired, PropTypes.object]),\n}\n\nexport default NumberInputDigit\n","import PropTypes from 'prop-types'\nconst ArrowHand = (props) => {\n    const { arrowDeg } = 0 || props\n    const { color = '#973341' } = props\n    const r = `rotate(${arrowDeg} 45 45)`\n    return (\n        <svg width=\"88\" height=\"88\" viewBox=\"0 0 88 88\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <g fill={color} transform={r}>\n                <path\n                    d=\"M39.1139 59.5181C47.2654 62.0847 56.0453 57.3544 58.7036 48.9119C61.3619 40.4693 56.8759 31.562 48.7244 28.9954C40.573 26.4288 31.793 31.1591 29.1347 39.6016C26.4764 48.0442 30.9624 56.9515 39.1139 59.5181 M48.5612 30.7586L43.899 7.27423L37.3446 31.4204L48.5612 30.7586Z\"\n                    fill={color}\n                    stroke={color}\n                />\n            </g>\n        </svg>\n    )\n}\nArrowHand.propTypes = {\n    arrowDeg: PropTypes.number,\n    color: PropTypes.string,\n}\n\nexport default ArrowHand\n","// главная\n\nimport { useState, useEffect, useRef, memo } from 'react'\n// import useResizeObserver from \"use-resize-observer\";\nimport InputMask from 'react-input-mask-next'\nimport {\n    Tooltip,\n    createStyles,\n    Affix,\n    Text,\n    Switch,\n    Group,\n    useMantineTheme,\n    useMantineColorScheme,\n    InputBase,\n    SimpleGrid,\n    Button,\n    BackgroundImage,\n    Card,\n    Image,\n    Center,\n    Box,\n    Container,\n    Space,\n    Grid,\n} from '@mantine/core'\n\nimport { useLogger, useId, useColorScheme, useLocalStorage } from '@mantine/hooks'\nimport useResizeObserver from 'use-resize-observer'\n\nimport useScreenshot from 'features/use-screenshot'\nimport CounterText from '../../features/counter-text'\n\nimport ControlledCounterDigit from 'features/controlled-counter-digit'\nimport NumberInputDigit from '../../features/number-input-digit'\n\nimport ArrowHand from '../../features/arrow-hand'\nimport { ImageCold, ImageHot, backNoise } from '../../shared/images'\nimport useResizeLogic from '../../features/use-resize-logic'\nimport { getCookies, getCookie, setCookie, deleteCookie } from 'cookies-next'\n\nconst TestPage = memo(() => {\n    const [isRandomFname] = useLocalStorage({ key: 'isRandomFname' })\n    const { colorScheme } = useMantineColorScheme()\n    const dark = colorScheme === 'dark'\n    const buttonRef = useRef(null)\n    const [hotRegNum, setHotRegNum] = useState<string>('')\n    const [coldRegNum, setColdRegNum] = useState<string>('')\n    const [hotValue, setValHot] = useState<number>(0)\n    const [digitsHot, setDigitsHot] = useState<number[]>([])\n    const [digitsCold, setDigitsCold] = useState<number[]>([])\n\n    const [coldValue, setValCold] = useState<number>(0)\n    const [arrowColdValue, setarrowCold] = useState<number>(0)\n    const [arrowHotValue, setarrowHot] = useState<number>(0)\n\n    const { reSizePx, reSize } = useResizeLogic()\n    const id = useId()\n\n    const { ref: wrapperRef, width, height } = useResizeObserver<HTMLDivElement>()\n    //@ts-expect-errors\n    const hkText = width >= 648 ? 0.335 : 0.178\n    //@ts-expect-errors\n    const wkText = width >= 648 ? 450 / width : 470 / width\n    //@ts-expect-errors\n    const hkArrow = width >= 648 ? 0.6 : 0.32\n    //@ts-expect-errors\n    const wkArrow = width >= 648 ? 1.2 : 2.2\n\n    const { generateImage, captureRef1, captureRef2, status } = useScreenshot()\n\n    const useStyles = createStyles((theme) => ({\n        leftBox: {\n            backgroundImage: `linear-gradient(20deg, transparent, 'blue', 'red', 'orange', 'cyan', 'white'))`,\n            position: 'relative',\n            minWidth: 100,\n        },\n        rightBox: {\n            backgroundImage: `linear-gradient(20deg, transparent, 'blue', 'red', 'orange', 'cyan', 'white'))`,\n            position: 'relative',\n            minWidth: 100,\n        },\n    }))\n\n    const { classes } = useStyles()\n\n    function onChangedigitHot(val: number) {\n        if (val > 99999) val = 99999 // потолок\n        //@ts-expect-error\n        let arrow = parseInt((val % 1).toFixed(4).substring(4).at(-1), 10) % 10\n        setarrowHot(arrow)\n        setDigitsHot(\n            (Math.trunc(val) + ((val - arrow / 10000) % 1).toFixed(3).slice(1))\n                .padStart(9, '0')\n                .split('')\n                .map(Number)\n                .filter((x: number) => {\n                    // eslint-disable-next-line no-self-compare\n                    return x === x || x === 0\n                })\n        )\n        return setValHot(val || 0)\n    }\n\n    function onChangedigitCold(val: number) {\n        if (val > 99999) val = 99999 // потолок\n        //@ts-expect-error\n        let arrow = parseInt((val % 1).toFixed(4).substring(4).at(-1), 10) % 10\n        setarrowCold(arrow)\n        setDigitsCold(\n            (Math.trunc(val) + ((val - arrow / 10000) % 1).toFixed(3).slice(1))\n                .padStart(9, '0')\n                .split('')\n                .map(Number)\n                .filter((x: number) => {\n                    // eslint-disable-next-line no-self-compare\n                    return x === x || x === 0\n                })\n        )\n\n        return setValCold(val || 0)\n    }\n\n    useLogger('TestPage: ', [\n        'reSize: ',\n        reSize,\n        reSizePx,\n        'cold',\n        coldValue,\n        arrowColdValue,\n        'hot',\n        hotValue,\n        arrowHotValue,\n        'digits',\n        digitsHot,\n        'sizes',\n        width,\n        height,\n        isRandomFname,\n    ])\n    /*@ts-expect-error\n    тюнинг-стиль на мобильных\n    */\n    /*@ts-expect-error*/\n    const forspan = width < 600 ? 'content' : 'auto'\n\n    useEffect(() => {\n        /*@ts-expect-error*/\n        buttonRef.current.click()\n        /* ⬆️ ворк-о'раунд,\n        fixed issue #1 исправить асинхрон useState в useScreenshot (https://www.reddit.com/r/javascript/comments/4rutq2/comment/d54chcb/) */\n        return () => {}\n    }, [isRandomFname])\n\n    return (\n        <>\n            <Container ref={wrapperRef}>\n                <Center>\n                    <Box\n                        sx={{\n                            alignContent: 'center',\n                        }}\n                    >\n                        <Grid gutter=\"lg\" align=\"center\" justify=\"center\">\n                            <Grid.Col span={forspan}>\n                                <InputBase\n                                    ta=\"center\"\n                                    pt={10}\n                                    pr={20}\n                                    pl={25}\n                                    size={reSize}\n                                    id={id}\n                                    label=\"Горячая вода\"\n                                    placeholder=\"Номер счётчика\"\n                                    mask=\"**-******\"\n                                    maskPlaceholder={null}\n                                    component={InputMask}\n                                    value={'' || hotRegNum}\n                                    onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                                        setHotRegNum(event.currentTarget.value)\n                                    }\n                                ></InputBase>\n                                <Tooltip\n                                    label=\"четвертая цифра после запятой двигает стрелочку\"\n                                    color={dark ? 'yellow' : 'blue'}\n                                    withArrow\n                                >\n                                    <div style={{ marginLeft: 'auto', marginRight: 'auto' }}>\n                                        <NumberInputDigit\n                                            /*@ts-expect-error */\n                                            ta=\"center\"\n                                            pt={10}\n                                            pr={20}\n                                            pl={25}\n                                            decimalSeparator=\",\"\n                                            size={reSize}\n                                            id={id}\n                                            placeholder=\"ГВ показания\"\n                                            onChange={onChangedigitHot}\n                                            val={hotValue || null}\n                                        ></NumberInputDigit>\n                                    </div>\n                                </Tooltip>\n                                <Box\n                                    /* @ts-expect-error */\n                                    ref={captureRef1}\n                                    className={classes.leftBox}\n                                >\n                                    {/* номер hot   */}\n                                    <CounterText\n                                        color=\"#4f4848\"\n                                        sx={{\n                                            letterSpacing: 0.1,\n                                            opacity: 0.3,\n                                            fontFamily: 'Tajawal, sans-serif',\n                                            fontKerning: 'normal',\n                                            fontSize: 34,\n                                            /*@ts-expect-error */\n                                            top: (0.52 * hkText * height) / 2,\n                                            /*@ts-expect-error */\n                                            left: (1.22 * wkText * width) / 4,\n                                            zIndex: 10,\n                                            position: 'absolute',\n                                            backdropFilter: 'blur(1px)',\n                                            textShadow: '1px 1px 1px rgba(0,0,0,.4), -1px -1px 0 rgba(255,255,255,.1)',\n                                        }}\n                                    >\n                                        {hotRegNum}\n                                    </CounterText>\n                                    <Box\n                                        sx={{\n                                            position: 'absolute',\n                                            zIndex: 11,\n                                            opacity: 0.8,\n                                            /*@ts-expect-error */\n                                            top: (1 * hkArrow * height) / 2,\n                                            /*@ts-expect-error */\n                                            left: (1 * wkArrow * width) / 4,\n                                        }}\n                                    >\n                                        {/* стрелка hot   */}\n                                        <ArrowHand\n                                            color=\"#973341\"\n                                            arrowDeg={((arrowHotValue || 0) % 10) * 36}\n                                            /* @ts-expect-error */\n                                            sx={{\n                                                opacity: 0.9,\n                                                position: 'absolute',\n                                                backdropFilter: 'blur(1px)',\n                                                textShadow:\n                                                    '1px 1px 1px rgba(0,0,0,.4), -1px -1px 0 rgba(255,255,255,.1)',\n                                            }}\n                                        />\n                                    </Box>\n                                    <ControlledCounterDigit\n                                        /*@ts-expect-error */\n                                        top={(hkText * height) / 2}\n                                        /*@ts-expect-error */\n                                        left={(18 + wkText * width) / 4}\n                                        /*@ts-expect-error  */\n                                        spaceBetween={27 - 1 * Number(!!(width < 648))}\n                                        digitsArray={digitsHot}\n                                        color=\"#4f4848\"\n                                    />\n                                    <Image\n                                        pt={10}\n                                        pr={20}\n                                        pb={10}\n                                        pl={25}\n                                        fit=\"contain\"\n                                        src={ImageHot}\n                                        radius=\"xs\"\n                                        withPlaceholder\n                                        placeholder={<Text align=\"center\">Счетчик горячей воды</Text>}\n                                        caption=\"Счетчик горячей воды\"\n                                    ></Image>\n                                </Box>\n                                <Center>\n                                    <Button\n                                        ref={buttonRef}\n                                        loading={status === 'loading'}\n                                        onClick={(e: React.SyntheticEvent) => generateImage(e, 1, isRandomFname)}\n                                    >\n                                        Скачать\n                                    </Button>\n                                </Center>\n                            </Grid.Col>\n                            <Grid.Col span={forspan}>\n                                <InputBase\n                                    style={{ textAlign: 'center' }}\n                                    ta=\"center\"\n                                    pt={10}\n                                    pr={20}\n                                    pl={25}\n                                    size={reSize}\n                                    id={id}\n                                    label=\"Холодная вода\"\n                                    placeholder=\"Номер счётчика\"\n                                    maskPlaceholder={null}\n                                    mask=\"**-******\"\n                                    component={InputMask}\n                                    value={'' || coldRegNum}\n                                    onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                                        setColdRegNum(event.currentTarget.value)\n                                    }\n                                ></InputBase>\n                                <Tooltip\n                                    label=\"четвертая цифра после запятой двигает стрелочку\"\n                                    color={dark ? 'yellow' : 'blue'}\n                                    withArrow\n                                >\n                                    <div style={{ marginLeft: 'auto', marginRight: 'auto' }}>\n                                        <NumberInputDigit\n                                            /*@ts-expect-error */\n                                            size={reSize}\n                                            type=\"text\"\n                                            style={{ textAlign: 'center' }}\n                                            noClampOnBlur={false}\n                                            decimalSeparator=\",\"\n                                            ta=\"center\"\n                                            pt={10}\n                                            pr={20}\n                                            pl={25}\n                                            id={id}\n                                            onChange={onChangedigitCold}\n                                            placeholder=\"ХВ показания\"\n                                            val={hotValue || null}\n                                        ></NumberInputDigit>\n                                    </div>\n                                </Tooltip>\n                                {/* eslint-disable @typescript-eslint/no-unused-vars */}\n                                {/* @ts-ignore */}\n                                <Box\n                                    /*@ts-expect-error */\n                                    ref={captureRef2}\n                                    className={classes.rightBox}\n                                >\n                                    {/* номер cold   */}\n                                    <CounterText\n                                        color=\"#4f4848\"\n                                        sx={{\n                                            letterSpacing: 0.1,\n                                            opacity: 0.3,\n                                            fontFamily: 'Tajawal, sans-serif',\n                                            fontKerning: 'normal',\n                                            fontSize: 33,\n                                            zIndex: 10,\n                                            position: 'absolute',\n                                            /*@ts-expect-error */\n                                            top: (0.61 * hkText * height) / 2,\n                                            /*@ts-expect-error */\n                                            left: (1.26 * wkText * width) / 4,\n                                            backdropFilter: 'blur(1px)',\n                                            textShadow: '1px 1px 1px rgba(0,0,0,.4), -1px -1px 0 rgba(255,255,255,.1)',\n                                        }}\n                                    >\n                                        {coldRegNum}\n                                    </CounterText>\n                                    <Box\n                                        aria-details=\"arrow cold\"\n                                        sx={{\n                                            position: 'absolute',\n                                            zIndex: 11,\n                                            opacity: 0.9,\n                                            /*@ts-expect-error */\n                                            top: (1.01 * hkArrow * height) / 2,\n                                            /*@ts-expect-error */\n                                            left: (1.025 * wkArrow * width) / 4,\n                                        }}\n                                    >\n                                        {/* стрелка cold   */}\n                                        <ArrowHand\n                                            color=\"#9b4444\"\n                                            arrowDeg={((arrowColdValue || 0) % 10) * 36}\n                                            /* @ts-expect-error */\n                                            sx={{\n                                                opacity: 0.9,\n                                                position: 'absolute',\n                                                backdropFilter: 'blur(1px)',\n                                                textShadow:\n                                                    '1px 1px 1px rgba(0,0,0,1), -1px -1px 0 rgba(255,255,255,.1)',\n                                            }}\n                                        />\n                                    </Box>\n                                    <ControlledCounterDigit\n                                        /*@ts-expect-error */\n                                        top={(1.07 * hkText * height) / 2}\n                                        /*@ts-expect-error */\n                                        left={(37 + wkText * width) / 4}\n                                        /*@ts-expect-error*/\n                                        spaceBetween={27 - 1 * Number(!!(width < 648))}\n                                        digitsArray={digitsCold}\n                                        color=\"#4f4848\"\n                                    />\n                                    <Image\n                                        pt={10}\n                                        pr={20}\n                                        pb={10}\n                                        pl={25}\n                                        fit=\"contain\"\n                                        src={ImageCold}\n                                        radius=\"xs\"\n                                        withPlaceholder\n                                        placeholder={<Text align=\"center\">Счетчик холодной воды</Text>}\n                                        caption=\"Счетчик холодной воды\"\n                                    ></Image>\n                                </Box>\n                                <Center>\n                                    <Button\n                                        loading={status === 'loading'}\n                                        onClick={(e: React.SyntheticEvent) => generateImage(e, 2, isRandomFname)}\n                                    >\n                                        Скачать\n                                    </Button>\n                                </Center>\n                            </Grid.Col>\n                        </Grid>\n                    </Box>\n                </Center>\n            </Container>\n        </>\n    )\n})\n\nTestPage.displayName = 'TestPage'\nexport default TestPage\n"],"names":["captureRef1","useRef","captureRef2","fileName","setFileName","useState","status","setStatus","choiceRef","UUID","replace","c","crypto","getRandomValues","Uint8Array","toString","split","curdate","Date","toISOString","console","log","generateImage","async","e","_choiceRef","arg","arguments","length","undefined","isRandomFname","preventDefault","current","imgBase64","toPng","quality","pixelRatio","isTrusted","download","error","props","children","color","top","left","onChange","restofProps","sx","letterSpacing","opacity","fontFamily","fontKerning","fontSize","zIndex","position","backdropFilter","textShadow","_jsx","Text","span","weight","spaceBetween","digitsArray","map","number","index","val","NumberInput","value","min","max","stepHoldDelay","stepHoldInterval","t","Math","step","precision","decimalSeparator","arrowDeg","r","width","height","viewBox","fill","xmlns","transform","d","stroke","TestPage","memo","useLocalStorage","key","colorScheme","useMantineColorScheme","dark","buttonRef","hotRegNum","setHotRegNum","coldRegNum","setColdRegNum","hotValue","setValHot","digitsHot","setDigitsHot","digitsCold","setDigitsCold","coldValue","setValCold","arrowColdValue","setarrowCold","arrowHotValue","setarrowHot","reSizePx","reSize","useResizeLogic","id","useId","ref","wrapperRef","useResizeObserver","hkText","wkText","hkArrow","wkArrow","useScreenshot","useStyles","createStyles","theme","leftBox","backgroundImage","minWidth","rightBox","classes","useLogger","forspan","useEffect","click","_Fragment","Container","Center","Box","alignContent","_jsxs","Grid","gutter","align","justify","Col","InputBase","ta","pt","pr","pl","size","label","placeholder","mask","maskPlaceholder","component","InputMask","event","currentTarget","Tooltip","withArrow","style","marginLeft","marginRight","NumberInputDigit","arrow","parseInt","toFixed","substring","at","trunc","slice","padStart","Number","filter","x","className","CounterText","ArrowHand","ControlledCounterDigit","Image","pb","fit","src","ImageHot","radius","withPlaceholder","caption","Button","loading","onClick","textAlign","type","noClampOnBlur","ImageCold","displayName"],"sourceRoot":""}