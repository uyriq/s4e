{"version":3,"file":"static/js/455.c8790bc5.chunk.js","mappings":"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","sources":["features/use-screenshot.js","features/counter-text.jsx","features/controlled-counter-digit.jsx","features/number-input-digit.jsx","features/arrow-hand.jsx","pages/test/index.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react'\nimport download from 'downloadjs'\nimport { toPng } from 'html-to-image'\n\n/**\n * Hook to generate screenshot\n */\nfunction useScreenshot() {\n    const captureRef1 = useRef()\n    const captureRef2 = useRef()\n    const [fileName, setFileName] = useState('undefined.PNG')\n    const [status, setStatus] = useState('idle')\n    let choiceRef\n\n    const UUID = (function UUIDGeneratorBrowser() {\n        return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11)\n            .replace(/[018]/g, (c) =>\n                (c ^ (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16)\n            )\n            .split('-')[0]\n    })()\n\n    const curdate = (function getDate() {\n        let d = new Date()\n        let dformat = d.toISOString().split('T')[0]\n        return '' + dformat\n    })()\n    console.log(UUID)\n    async function generateImage(e, arg = 0, isRandomFname) {\n        console.log(arg)\n\n        e.preventDefault()\n\n        switch (arg) {\n            case 2: {\n                choiceRef = captureRef2\n                break\n            }\n            case 1:\n            default: {\n                choiceRef = captureRef1\n                break\n            }\n        }\n\n        if (!choiceRef?.current) {\n            return\n        }\n\n        isRandomFname ? setFileName(UUID + '.png') : setFileName(curdate + '.png')\n        try {\n            setStatus('loading')\n            const imgBase64 = await toPng(choiceRef.current, {\n                quality: 1,\n                pixelRatio: 1,\n            })\n            e.isTrusted && download(imgBase64, fileName)\n            setStatus('success')\n        } catch (error) {\n            setStatus('error')\n            console.error(error)\n        } finally {\n            choiceRef = null\n        }\n    }\n\n    return {\n        generateImage,\n        captureRef1,\n        captureRef2,\n        status,\n    }\n}\n\nexport default useScreenshot\n","import { Text } from '@mantine/core'\nimport PropTypes from 'prop-types'\n\nconst CounterText = (props) => {\n    const { children, color = '#4f4848', top = 0, left = 0, onChange, ...restofProps } = props\n\n    const sx = props.sx || {\n        letterSpacing: 0.1,\n        opacity: 0.9,\n        fontFamily: 'Tajawal, sans-serif',\n        fontKerning: 'normal',\n        fontSize: 28,\n        zIndex: 10,\n        position: 'absolute',\n        top: top,\n        left: left,\n        backdropFilter: 'blur(1px)',\n        textShadow: '1px 1px 1px rgba(0,0,0,.4), -1px -1px 0 rgba(255,255,255,.1)',\n    }\n\n    return (\n        <Text span weight={'light'} color={color} sx={sx} {...restofProps}>\n            {children}\n        </Text>\n    )\n}\n\nCounterText.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n    left: PropTypes.number,\n    top: PropTypes.number,\n    color: PropTypes.string,\n    onChange: PropTypes.func,\n    sx: PropTypes.shape({\n        letterSpacing: PropTypes.number,\n        opacity: PropTypes.number,\n        fontFamily: PropTypes.string,\n        fontKerning: PropTypes.string,\n        fontSize: PropTypes.number,\n        zIndex: PropTypes.number,\n        position: PropTypes.string,\n        top: PropTypes.number,\n        left: PropTypes.number,\n        backdropFilter: PropTypes.string,\n        textShadow: PropTypes.string,\n    }),\n}\n\nexport default CounterText\n","import { Text } from '@mantine/core'\nimport PropTypes from 'prop-types'\n\nconst ControlledCounterDigit = (props) => {\n    const {\n        spaceBetween = 20,\n        digitsArray = [],\n        color = '#d9480f',\n        top = 0,\n        left = 0,\n        onChange,\n        ...restofProps\n    } = props\n\n    return (\n        <div>\n            {digitsArray.map((number, index) => (\n                <Text\n                    key={index}\n                    span\n                    weight={'light'}\n                    color={color}\n                    sx={{\n                        position: 'absolute',\n                        top: top,\n                        left: left + spaceBetween * index,\n                        letterSpacing: 0.1,\n                        opacity: 0.9,\n                        fontFamily: 'Tajawal, sans-serif',\n                        fontKerning: 'normal',\n                        fontSize: 32,\n                        zIndex: 10,\n                        backdropFilter: 'blur(1px)',\n                        textShadow: '1px 1px 1px rgba(0,0,0,.4), -1px -1px 0 rgba(255,255,255,.1)',\n                    }}\n                    {...restofProps}\n                >\n                    {number}\n                </Text>\n            ))}\n        </div>\n    )\n}\n\nControlledCounterDigit.propTypes = {\n    digitsArray: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])).isRequired,\n    spaceBetween: PropTypes.number,\n    left: PropTypes.number,\n    top: PropTypes.number,\n    color: PropTypes.string,\n    onChange: PropTypes.func,\n    sx: PropTypes.shape({\n        letterSpacing: PropTypes.number,\n        opacity: PropTypes.number,\n        fontFamily: PropTypes.string,\n        fontKerning: PropTypes.string,\n        fontSize: PropTypes.number,\n        zIndex: PropTypes.number,\n        position: PropTypes.string,\n        top: PropTypes.number,\n        left: PropTypes.number,\n        backdropFilter: PropTypes.string,\n        textShadow: PropTypes.string,\n    }),\n}\n\nexport default ControlledCounterDigit\n","import { NumberInput } from '@mantine/core'\n\nimport PropTypes from 'prop-types'\n\nconst NumberInputDigit = (props) => {\n    const { val = 0, onChange, ...restofProps } = props\n\n    return (\n        <NumberInput\n            {...restofProps}\n            value={val}\n            min={0}\n            max={99999}\n            stepHoldDelay={500}\n            stepHoldInterval={(t) => Math.max(1000 / t ** 4, 1)}\n            step={0.0001}\n            precision={4}\n            decimalSeparator=\",\"\n            onChange={onChange}\n        />\n    )\n}\n\nNumberInputDigit.propTypes = {\n    restofProps: PropTypes.element,\n    onChange: PropTypes.func.isRequired,\n    val: PropTypes.number.isRequired,\n}\n\nexport default NumberInputDigit\n","import PropTypes from 'prop-types'\nconst ArrowHand = (props) => {\n    const { arrowDeg } = 0 || props\n    const { color = '#973341' } = props\n    const r = `rotate(${arrowDeg} 45 45)`\n    return (\n        <svg width=\"88\" height=\"88\" viewBox=\"0 0 88 88\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <g fill={color} transform={r}>\n                <path\n                    d=\"M39.1139 59.5181C47.2654 62.0847 56.0453 57.3544 58.7036 48.9119C61.3619 40.4693 56.8759 31.562 48.7244 28.9954C40.573 26.4288 31.793 31.1591 29.1347 39.6016C26.4764 48.0442 30.9624 56.9515 39.1139 59.5181 M48.5612 30.7586L43.899 7.27423L37.3446 31.4204L48.5612 30.7586Z\"\n                    fill={color}\n                    stroke={color}\n                />\n            </g>\n        </svg>\n    )\n}\nArrowHand.propTypes = {\n    arrowDeg: PropTypes.number,\n    color: PropTypes.string,\n}\n\nexport default ArrowHand\n","// главная\n\nimport { useState, useEffect, useRef, memo } from 'react'\n// import useResizeObserver from \"use-resize-observer\";\nimport InputMask from 'react-input-mask-next'\nimport {\n    Tooltip,\n    createStyles,\n    Affix,\n    Text,\n    Switch,\n    Group,\n    useMantineTheme,\n    InputBase,\n    SimpleGrid,\n    Button,\n    BackgroundImage,\n    Card,\n    Image,\n    Center,\n    Box,\n    Container,\n    Space,\n    Grid,\n} from '@mantine/core'\n\nimport { useLogger, useId, useColorScheme, useLocalStorage } from '@mantine/hooks'\nimport useResizeObserver from 'use-resize-observer'\n\nimport useScreenshot from 'features/use-screenshot'\nimport CounterText from '../../features/counter-text'\n\nimport ControlledCounterDigit from 'features/controlled-counter-digit'\nimport NumberInputDigit from '../../features/number-input-digit'\n\nimport ArrowHand from '../../features/arrow-hand'\nimport { ImageCold, ImageHot, backNoise } from '../../shared/images'\nimport useResizeLogic from '../../features/use-resize-logic'\nimport { getCookies, getCookie, setCookie, deleteCookie } from 'cookies-next'\n\nconst TestPage = memo(() => {\n    const [isRandomFname] = useLocalStorage({ key: 'isRandomFname' })\n\n    const buttonRef = useRef(null)\n    const [hotRegNum, setHotRegNum] = useState<string>('')\n    const [coldRegNum, setColdRegNum] = useState<string>('')\n    const [hotValue, setValHot] = useState<number>(0)\n    const [digitsHot, setDigitsHot] = useState<number[]>([])\n    const [digitsCold, setDigitsCold] = useState<number[]>([])\n\n    const [coldValue, setValCold] = useState<number>(0)\n    const [arrowColdValue, setarrowCold] = useState<number>(0)\n    const [arrowHotValue, setarrowHot] = useState<number>(0)\n\n    const { reSizePx, reSize } = useResizeLogic()\n    const id = useId()\n\n    const { ref: wrapperRef, width, height } = useResizeObserver<HTMLDivElement>()\n    //@ts-expect-errors\n    const hk = width >= 648 ? 0.29 : 0.155\n    //@ts-expect-errors\n    const wk = width >= 648 ? 410 / width : 400 / width\n\n    const { generateImage, captureRef1, captureRef2, status } = useScreenshot()\n\n    const useStyles = createStyles((theme) => ({\n        leftBox: {\n            backgroundImage: `linear-gradient(20deg, transparent, 'blue', 'red', 'orange', 'cyan', 'white'))`,\n            position: 'relative',\n            minWidth: 100,\n        },\n        rightBox: {\n            backgroundImage: `linear-gradient(20deg, transparent, 'blue', 'red', 'orange', 'cyan', 'white'))`,\n            position: 'relative',\n            minWidth: 100,\n        },\n    }))\n\n    const { classes } = useStyles()\n\n    function onChangedigitHot(val: number) {\n        if (val > 99999) val = 99999 // потолок\n        //@ts-expect-error\n        let arrow = parseInt((val % 1).toFixed(4).substring(4).at(-1), 10) % 10\n        setarrowHot(arrow)\n        setDigitsHot(\n            (Math.trunc(val) + ((val - arrow / 10000) % 1).toFixed(3).slice(1))\n                .padStart(9, '0')\n                .split('')\n                .map(Number)\n                .filter((x: number) => {\n                    // eslint-disable-next-line no-self-compare\n                    return x === x || x === 0\n                })\n        )\n        return setValHot(val || 0)\n    }\n\n    function onChangedigitCold(val: number) {\n        if (val > 99999) val = 99999 // потолок\n        //@ts-expect-error\n        let arrow = parseInt((val % 1).toFixed(4).substring(4).at(-1), 10) % 10\n        setarrowCold(arrow)\n        setDigitsCold(\n            (Math.trunc(val) + ((val - arrow / 10000) % 1).toFixed(3).slice(1))\n                .padStart(9, '0')\n                .split('')\n                .map(Number)\n                .filter((x: number) => {\n                    // eslint-disable-next-line no-self-compare\n                    return x === x || x === 0\n                })\n        )\n\n        return setValCold(val || 0)\n    }\n\n    useLogger('TestPage: ', [\n        'reSize: ',\n        reSize,\n        reSizePx,\n        'cold',\n        coldValue,\n        arrowColdValue,\n        'hot',\n        hotValue,\n        arrowHotValue,\n        'digits',\n        digitsHot,\n        'sizes',\n        width,\n        height,\n        isRandomFname,\n    ])\n    /*@ts-expect-error\n    тюнинг-стиль на мобильных\n    */\n    /*@ts-expect-error*/\n    const forspan = width < 600 ? 'content' : 'auto'\n\n    useEffect(() => {\n        /*@ts-expect-error*/\n        buttonRef.current.click()\n        /* ⬆️ ворк-о'раунд,\n        fixed issue #1 исправить асинхрон useState в useScreenshot (https://www.reddit.com/r/javascript/comments/4rutq2/comment/d54chcb/) */\n        return () => {}\n    }, [isRandomFname])\n\n    return (\n        <>\n            <Container ref={wrapperRef}>\n                <Center>\n                    <Box\n                        sx={{\n                            alignContent: 'center',\n                        }}\n                    >\n                        <Grid align=\"center\" justify={'center'}>\n                            <Grid.Col span={forspan}>\n                                <InputBase\n                                    p={25}\n                                    size={reSize}\n                                    id={id}\n                                    label=\"ГВ номер счётчика\"\n                                    mask=\"**-******\"\n                                    component={InputMask}\n                                    value={'' || hotRegNum}\n                                    onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                                        setHotRegNum(event.currentTarget.value)\n                                    }\n                                ></InputBase>\n                                <Tooltip label=\"четвертая цифра после запятой двигает стрелочку\">\n                                    <NumberInputDigit /*@ts-expect-error */\n                                        p={25}\n                                        decimalSeparator=\",\"\n                                        size={reSize}\n                                        id={id}\n                                        label=\"ГВ показания\"\n                                        onChange={onChangedigitHot}\n                                        val={hotValue}\n                                    ></NumberInputDigit>\n                                </Tooltip>\n                                <Box\n                                    /* @ts-expect-error */\n                                    ref={captureRef1}\n                                    className={classes.leftBox}\n                                >\n                                    {/* номер hot   */}\n                                    <CounterText\n                                        color=\"#4f4848\"\n                                        sx={{\n                                            letterSpacing: 0.1,\n                                            opacity: 0.3,\n                                            fontFamily: 'Tajawal, sans-serif',\n                                            fontKerning: 'normal',\n                                            fontSize: 34,\n                                            /*@ts-expect-error */\n                                            top: (0.52 * hk * height) / 2,\n                                            /*@ts-expect-error */\n                                            left: (1.25 * wk * width) / 4,\n                                            zIndex: 10,\n                                            position: 'absolute',\n                                            backdropFilter: 'blur(1px)',\n                                            textShadow: '1px 1px 1px rgba(0,0,0,.4), -1px -1px 0 rgba(255,255,255,.1)',\n                                        }}\n                                    >\n                                        {hotRegNum}\n                                    </CounterText>\n                                    <Box\n                                        sx={{\n                                            position: 'absolute',\n                                            zIndex: 11,\n                                            opacity: 0.8,\n                                            /*@ts-expect-error */\n                                            top: (1.75 * hk * height) / 2,\n                                            /*@ts-expect-error */\n                                            left: (2.6 * wk * width) / 4,\n                                        }}\n                                    >\n                                        {/* стрелка hot   */}\n                                        <ArrowHand\n                                            color=\"#973341\"\n                                            arrowDeg={((arrowHotValue || 0) % 10) * 36}\n                                            /* @ts-expect-error */\n                                            sx={{\n                                                opacity: 0.9,\n                                                position: 'absolute',\n                                                backdropFilter: 'blur(1px)',\n                                                textShadow:\n                                                    '1px 1px 1px rgba(0,0,0,.4), -1px -1px 0 rgba(255,255,255,.1)',\n                                            }}\n                                        />\n                                    </Box>\n                                    <ControlledCounterDigit\n                                        /*@ts-expect-error */\n                                        top={(hk * height) / 2}\n                                        /*@ts-expect-error */\n                                        left={(10 + wk * width) / 4}\n                                        /*@ts-expect-error  */\n                                        spaceBetween={27 - 1 * Number(!!(width < 648))}\n                                        digitsArray={digitsHot}\n                                        color=\"#4f4848\"\n                                    />\n                                    <Image\n                                        p={10}\n                                        fit=\"contain\"\n                                        src={ImageHot}\n                                        radius=\"xs\"\n                                        withPlaceholder\n                                        placeholder={<Text align=\"center\">Счетчик горячей воды</Text>}\n                                        caption=\"Счетчик горячей воды\"\n                                    ></Image>\n                                </Box>\n                                <Center>\n                                    <Button\n                                        ref={buttonRef}\n                                        loading={status === 'loading'}\n                                        onClick={(e: React.SyntheticEvent) => generateImage(e, 1, isRandomFname)}\n                                    >\n                                        Скачать\n                                    </Button>\n                                </Center>\n                            </Grid.Col>\n                            <Grid.Col span={forspan}>\n                                <InputBase\n                                    p={25}\n                                    size={reSize}\n                                    id={id}\n                                    label=\"ХВ номер счётчика\"\n                                    mask=\"**-******\"\n                                    component={InputMask}\n                                    value={'' || coldRegNum}\n                                    onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                                        setColdRegNum(event.currentTarget.value)\n                                    }\n                                ></InputBase>\n                                <Tooltip label=\"четвертая цифра после запятой двигает стрелочку\">\n                                    <NumberInputDigit\n                                        /*@ts-expect-error */\n                                        size={reSize}\n                                        p={25}\n                                        id={id}\n                                        label=\"ХВ показания\"\n                                        onChange={onChangedigitCold}\n                                        val={0 || coldValue}\n                                    ></NumberInputDigit>\n                                </Tooltip>\n                                {/* eslint-disable @typescript-eslint/no-unused-vars */}\n                                {/* @ts-ignore */}\n                                <Box\n                                    /*@ts-expect-error */\n                                    ref={captureRef2}\n                                    className={classes.rightBox}\n                                >\n                                    {/* номер cold   */}\n                                    <CounterText\n                                        color=\"#4f4848\"\n                                        sx={{\n                                            letterSpacing: 0.1,\n                                            opacity: 0.3,\n                                            fontFamily: 'Tajawal, sans-serif',\n                                            fontKerning: 'normal',\n                                            fontSize: 33,\n                                            zIndex: 10,\n                                            position: 'absolute',\n                                            /*@ts-expect-error */\n                                            top: (0.6 * hk * height) / 2,\n                                            /*@ts-expect-error */\n                                            left: (1.32 * wk * width) / 4,\n                                            backdropFilter: 'blur(1px)',\n                                            textShadow: '1px 1px 1px rgba(0,0,0,.4), -1px -1px 0 rgba(255,255,255,.1)',\n                                        }}\n                                    >\n                                        {coldRegNum}\n                                    </CounterText>\n                                    <Box\n                                        sx={{\n                                            position: 'absolute',\n                                            zIndex: 11,\n                                            opacity: 0.9,\n                                            /*@ts-expect-error */\n                                            top: (1.76 * hk * height) / 2,\n                                            /*@ts-expect-error */\n                                            left: (2.7 * wk * width) / 4,\n                                        }}\n                                    >\n                                        {/* стрелка cold   */}\n                                        <ArrowHand\n                                            color=\"#9b4444\"\n                                            arrowDeg={((arrowColdValue || 0) % 10) * 36}\n                                            /* @ts-expect-error */\n                                            sx={{\n                                                opacity: 0.9,\n                                                position: 'absolute',\n                                                backdropFilter: 'blur(1px)',\n                                                textShadow:\n                                                    '1px 1px 1px rgba(0,0,0,1), -1px -1px 0 rgba(255,255,255,.1)',\n                                            }}\n                                        />\n                                    </Box>\n                                    <ControlledCounterDigit\n                                        /*@ts-expect-error */\n                                        top={(1.07 * hk * height) / 2}\n                                        /*@ts-expect-error */\n                                        left={(15 + wk * width) / 4}\n                                        /*@ts-expect-error*/\n                                        spaceBetween={27 - 1 * Number(!!(width < 648))}\n                                        digitsArray={digitsCold}\n                                        color=\"#4f4848\"\n                                    />\n                                    <Image\n                                        p={10}\n                                        fit=\"contain\"\n                                        src={ImageCold}\n                                        radius=\"xs\"\n                                        withPlaceholder\n                                        placeholder={<Text align=\"center\">Счетчик холодной воды</Text>}\n                                        caption=\"Счетчик холодной воды\"\n                                    ></Image>\n                                </Box>\n                                <Center>\n                                    <Button\n                                        loading={status === 'loading'}\n                                        onClick={(e: React.SyntheticEvent) => generateImage(e, 2, isRandomFname)}\n                                    >\n                                        Скачать\n                                    </Button>\n                                </Center>\n                            </Grid.Col>\n                        </Grid>\n                    </Box>\n                </Center>\n            </Container>\n        </>\n    )\n})\n\nTestPage.displayName = 'TestPage'\nexport default TestPage\n"],"names":["choiceRef","captureRef1","useRef","captureRef2","useState","fileName","setFileName","status","setStatus","UUID","replace","c","crypto","getRandomValues","Uint8Array","toString","split","curdate","Date","toISOString","e","arg","isRandomFname","console","log","preventDefault","current","toPng","quality","pixelRatio","imgBase64","isTrusted","download","error","generateImage","props","children","color","top","left","restofProps","onChange","sx","letterSpacing","opacity","fontFamily","fontKerning","fontSize","zIndex","position","backdropFilter","textShadow","Text","span","weight","spaceBetween","digitsArray","map","number","index","val","NumberInput","value","min","max","stepHoldDelay","stepHoldInterval","t","Math","step","precision","decimalSeparator","arrowDeg","r","width","height","viewBox","fill","xmlns","transform","d","stroke","TestPage","memo","useLocalStorage","key","buttonRef","hotRegNum","setHotRegNum","coldRegNum","setColdRegNum","hotValue","setValHot","digitsHot","setDigitsHot","digitsCold","setDigitsCold","coldValue","setValCold","arrowColdValue","setarrowCold","arrowHotValue","setarrowHot","useResizeLogic","reSizePx","reSize","id","useId","useResizeObserver","wrapperRef","ref","hk","wk","useScreenshot","classes","createStyles","theme","leftBox","backgroundImage","minWidth","rightBox","useStyles","useLogger","forspan","useEffect","click","Container","Center","Box","alignContent","Grid","align","justify","InputBase","p","size","label","mask","component","InputMask","event","currentTarget","Tooltip","arrow","parseInt","toFixed","substring","at","trunc","slice","padStart","Number","filter","x","className","Image","fit","src","ImageHot","radius","withPlaceholder","placeholder","caption","Button","loading","onClick","ImageCold","displayName"],"sourceRoot":""}